public static class LevelGenerator
{
    public static void Generate(Level level)
    {
        EntityID.ID _ = EntityID.ID._Empty;
        EntityID.ID g = EntityID.ID.CharacterGoblin;
        EntityID.ID p = EntityID.ID.CharacterPlayer;
        EntityID.ID a = EntityID.ID.ItemApple;
        EntityID.ID t = EntityID.ID.ItemTurnip;
        EntityID.ID O = EntityID.ID.TerrainGrass;
        EntityID.ID T = EntityID.ID.Tree;

        FillLayer(level, EntityID.ID.TerrainGrass, 0);

        EntityID.ID[,,] levelData = new EntityID.ID[,,]
        {
            {
                {T,_,T,_,T,_,_,_,T,_,_,_,T,_,_,_,T,_,_,_,T,_,_,_,T,_,T,_,T},
                {_,_,_,_,_,_,T,_,_,_,T,_,_,_,T,_,_,_,T,_,_,_,T,_,_,_,_,_,_},
                {T,_,T,_,T,_,_,_,_,_,_,_,a,_,_,_,a,_,_,_,a,_,_,_,T,_,T,_,T},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,g,_,_,_,O,_,_,_,_,_,_,_,_,_,_,_},
                {T,_,T,_,_,g,_,_,T,_,_,g,_,_,_,g,_,_,_,O,O,O,_,_,g,_,T,_,T},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,g,_,_,_,_,_,O,O,_,_,_,_,_,_,_,_},
                {_,T,_,_,g,_,g,_,_,_,g,_,_,_,_,g,_,_,_,_,_,_,_,O,O,_,_,T,_},
                {_,_,_,_,_,_,_,_,g,_,_,_,_,_,_,_,_,_,O,O,_,_,_,_,_,_,_,_,_},
                {T,_,a,_,_,_,_,_,_,_,_,_,O,O,O,O,_,_,_,O,_,_,O,_,g,_,a,_,T},
                {_,_,_,_,_,_,O,O,O,_,_,_,O,O,O,O,O,O,_,_,_,_,_,_,_,_,_,_,_},
                {_,T,_,_,_,O,O,O,O,O,_,_,_,O,O,O,O,O,O,O,O,O,_,_,_,_,_,T,_},
                {_,_,_,_,_,O,O,O,O,O,O,O,_,_,_,O,O,O,O,O,O,O,O,O,O,_,_,_,_},
                {T,_,a,_,_,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,_,_,_,_,T},
                {_,_,_,_,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,_,_,g,_,_,_},
                {_,T,_,_,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,_,_,_,T,_},
                {_,_,_,_,_,_,_,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,_,_,_,_,_},
                {T,_,_,_,_,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,_,_,_,T},
                {_,_,_,_,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,_,_,_,_},
                {_,T,_,_,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,_,_,T,_},
                {_,_,_,_,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,_,_,_,_,_},
                {T,_,a,_,O,O,O,O,O,O,O,O,O,_,_,O,O,O,O,O,O,O,O,_,_,_,a,_,T},
                {_,_,_,_,_,O,O,O,O,_,_,_,_,_,_,O,O,O,O,O,O,O,_,_,_,_,_,_,_},
                {_,T,_,_,_,_,_,_,_,_,_,_,_,_,O,O,O,O,O,O,O,O,O,O,_,_,_,T,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,O,O,O,O,O,O,O,O,O,_,_,_,_,_,_},
                {T,_,T,_,_,_,_,_,_,T,_,_,_,_,_,_,O,O,O,_,O,_,_,_,_,_,T,_,T},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {T,_,T,_,T,_,_,_,a,_,_,_,_,_,_,_,_,_,_,_,a,_,_,_,T,_,T,_,T},
                {_,_,_,_,_,_,T,_,_,_,T,_,_,_,T,_,_,_,T,_,_,_,T,_,_,_,_,_,_},
                {T,_,T,_,T,_,_,_,T,_,_,_,T,_,_,_,T,_,_,_,T,_,_,_,T,_,T,_,T},
            },
            {
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,O,O,O,O,_,_,_,_,_,_,_,_,_,O,O,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,O,O,O,_,_,O,_,_,_,_,_,_,O,O,O,O,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,O,_,_,_,_,_,_,_,a,_,O,O,O,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,a,_,_,_,_,_,_,_,O,O,O,O,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,O,O,O,O,_,_,_,O,O,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,O,O,O,O,O,O,O,O,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,O,O,O,O,O,O,O,O,O,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,T,_,_,_,O,O,O,O,O,O,O,_,_,_,_,_,T,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,O,O,O,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,p,_,_,_,_,_,_,_,_,_,_,t,t,t,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,O,O,t,t,t,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,O,O,t,t,t,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
            },
            {
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,O,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,O,O,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,O,O,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,O,O,O,_,O,O,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,O,O,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
            },
        };

        for (int iy = 0; iy < levelData.GetLength(0); iy++)
        {
            for (int ix = 0; ix < levelData.GetLength(1); ix++)
            {
                for (int iz = 0; iz < levelData.GetLength(2); iz++)
                {
                    if (ix < level.GetXWidth() && iz < level.GetZWidth() && iy + 1 < level.GetHeight())
                    {
                        level.Set(levelData[iy, ix, iz], ix, iy + 1, iz);
                    }
                }
            }
        }
    }

    private static void FillLayer(Level level, EntityID.ID id, int layer)
    {
        int xWidth = level.GetXWidth();
        int zWidth = level.GetZWidth();

        for (int x = 0; x < xWidth; x++)
        {
            for (int z = 0; z < zWidth; z++)
            {
                level.Set(id, x, layer, z);
            }
        }
    }

    private static void FillLayerBorders(Level level, EntityID.ID id, int layer)
    {
        int xWidth = level.GetXWidth();
        int zWidth = level.GetZWidth();

        for (int x = 0; x < xWidth; x++)
        {
            for (int z = 0; z < zWidth; z++)
            {
                if (x == 0 || z == 0 || x == xWidth - 1 || z == zWidth - 1)
                {
                    level.Set(id, x, layer, z);
                }
            }
        }
    }
}