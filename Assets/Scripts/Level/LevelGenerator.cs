using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public static class LevelGenerator
{
    public static void Generate(Level level)
    {
        EntityID.ID _ = EntityID.ID._Empty;
        EntityID.ID G = EntityID.ID.CharacterGoblin;
        EntityID.ID P = EntityID.ID.CharacterPlayer;
        EntityID.ID A = EntityID.ID.ItemApple;
        EntityID.ID T = EntityID.ID.TerrainGrass;

        FillLayer(level, EntityID.ID.TerrainGrass, 0);

        EntityID.ID[,,] levelData = new EntityID.ID[,,]
        {
            {
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,T,T,_,_,_,_,_,T,_,T,T,T,T,T,T,T,T,T,_},
                {_,T,_,_,T,T,T,_,_,T,T,T,_,_,_,T,T,T,T,_},
                {_,T,_,T,T,T,T,T,T,T,T,_,G,_,_,T,T,T,T,_},
                {_,_,_,T,T,T,T,T,T,T,T,_,_,_,_,_,T,T,T,_},
                {_,_,T,T,T,T,T,T,T,_,_,_,_,G,_,_,_,T,T,_},
                {_,T,T,T,T,T,T,T,T,T,T,T,_,_,_,_,_,T,T,_},
                {_,T,T,T,T,T,T,T,T,T,T,T,_,_,_,_,G,_,T,_},
                {_,_,T,T,T,T,T,T,T,T,T,_,_,_,A,_,_,_,T,_},
                {_,_,T,T,T,T,T,_,T,T,T,_,_,_,_,_,_,_,T,_},
                {_,T,T,T,T,_,T,_,T,T,_,_,_,G,_,_,_,T,T,_},
                {_,T,T,_,_,A,_,_,_,_,_,_,_,_,T,T,_,T,T,_},
                {_,T,_,_,_,_,_,_,_,_,G,_,_,T,T,T,_,_,T,_},
                {_,T,_,_,G,_,A,_,_,_,_,_,_,T,T,_,_,_,T,_},
                {_,T,_,_,_,_,_,_,_,G,_,_,_,_,_,_,G,_,T,_},
                {_,T,_,_,_,_,_,_,_,_,_,_,P,_,_,_,_,T,T,_},
                {_,T,T,T,_,_,G,_,_,_,_,T,T,_,_,G,_,T,T,_},
                {_,T,T,T,T,_,_,_,_,T,T,T,T,_,_,_,T,T,T,_},
                {_,T,T,T,T,T,T,T,T,T,T,T,T,T,T,T,T,T,T,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
            },
            {
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,T,T,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,T,T,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,T,T,T,T,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,T,T,T,T,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,T,T,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,T,T,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,T,T,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,T,T,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
            },
            {
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,T,T,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,T,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,T,T,T,T,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,T,T,T,T,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,T,T,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,T,T,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,T,T,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,T,T,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
            },
            {
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,T,T,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,T,T,T,T,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,T,T,T,T,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,T,T,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,T,T,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,T,T,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,T,T,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
                {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_},
            },

        };

        for (int iy = 0; iy < levelData.GetLength(0); iy++)
        {
            for (int ix = 0; ix < levelData.GetLength(1); ix++)
            {
                for (int iz = 0; iz < levelData.GetLength(2); iz++)
                {
                    if (ix < level.GetXWidth() && iz < level.GetZWidth() && iy + 1 < level.GetHeight())
                    {
                        level.Set(levelData[iy, ix, iz], ix, iy + 1, iz);
                    }
                }
            }
        }
    }

    private static void FillLayer(Level level, EntityID.ID id, int layer)
    {
        int xWidth = level.GetXWidth();
        int zWidth = level.GetZWidth();

        for (int x = 0; x < xWidth; x++)
        {
            for (int z = 0; z < zWidth; z++)
            {
                level.Set(id, x, layer, z);
            }
        }
    }

    private static void FillLayerBorders(Level level, EntityID.ID id, int layer)
    {
        int xWidth = level.GetXWidth();
        int zWidth = level.GetZWidth();

        for (int x = 0; x < xWidth; x++)
        {
            for (int z = 0; z < zWidth; z++)
            {
                if (x == 0 || z == 0 || x == xWidth - 1 || z == zWidth - 1)
                {
                    level.Set(id, x, layer, z);
                }
            }
        }
    }
}